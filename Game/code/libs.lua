---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chex.
--- DateTime: 1/28/2022 7:56 PM
---


--- global game tables
core = {} -- basic libraries and functions (core.draw, etc)
g = {}    -- holds all GLOBAL data (independent of game state)
game = {} -- holds all functions/vars relative to the game
menu = {} -- holds all functions/vars relative to the menu

--- love2d constants
lfs = love.filesystem
lg = love.graphics
ls = love.system
lw = love.window
lk = love.keyboard


------------------------ 'core' variables
-- determine the window size
core.sWidth, core.sHeight = lg.getDimensions()

-- determine the "bump" values
core.bumpX = (core.sWidth-800)/2
core.bumpY = (core.sHeight-600)/2


------------------------ 'g' variables

-- stores all images used in the game
g.img = {}
g.imagePointers = {
    desktop = "desktop.png",
    playAreaBg = "playAreaBg.png",
    playAreaWindow = "playAreaWindow.png",
    playAreaForeground = "playAreaForeground.png",
    progressWindow = "progressWindow.png",
    menuTask = "task.png",
    taskbar = "taskbar.png",
    terminal = "terminal.png",
}

------------------------ 'game' variables

game.fieldOffset = {x = 50, y = 40}


------------------------ 'menu' variables



---------------------------------------------------------------------
-------------------------CORE FUNCTIONS------------------------------

 -- NOTE: for drawing within the bounds of the game window, use game.draw()
function core.draw( drawable, x, y, r, sx, sy, ox, oy, kx, ky ) -- in place of love.graphics.draw()
    if type(drawable) == "string" then -- use lg.print to draw if string
        lg.print( drawable, x, y, r, sx, sy, ox, oy, kx, ky )
    else                               -- other drawable types use lg.draw
        -- converting the scale functionality to exact pixel measurements
        if sx then
            sx = (1 / drawable:getWidth()) * sx
        end

        if sy then
            sy = (1 / drawable:getHeight()) * sy
        end

        if ox then
            if ox == "left" then
                ox = 0
            elseif ox == "center" then
                ox = drawable:getWidth()/2
            elseif ox == "right" then
                ox = drawable:getWidth()
            end
        end

        if oy then
            if oy == "top" then
                oy = 0
            elseif oy == "center" then
                oy = drawable:getHeight()/2
            elseif oy == "bottom" then
                oy = drawable:getHeight()
            end
        end

        lg.draw( drawable, x, y, r, sx, sy, ox, oy, kx, ky )
    end
end

-- returns the aspect ratio of either a drawable or X and Y size
function core.aspectRatio(firstVal, secondVal)
    if secondVal then
        return (firstVal/secondVal)
    else
        return firstVal:getWidth()/firstVal:getHeight()
    end
end

function core.update(dt)

end


---------------------------------------------------------------------
-----------------------GLOBAL FUNCTIONS------------------------------

function g.render() -- the initial rendering function. handles rendering the desktop (and responsible for zoom)

    -- determine the window size
    core.sWidth, core.sHeight = lg.getDimensions()

    -- determine the "bump" values
    core.bumpX = (core.sWidth-800)/2
    core.bumpY = (core.sHeight-600)/2





    -------------------------------------screen zoom-----------------------------------
        local ratio
        if core.sWidth > core.sHeight then
            ratio = (core.sHeight/600)
        else
            ratio = (core.sWidth/800)
        end
        local wr = (ratio)-1
        local translateX = -(core.sWidth/(1/wr)/2)
        local translateY = -(core.sHeight/(1/wr)/2)

        lg.translate(translateX, translateY)
        lg.scale(ratio,ratio)
   ------------------------------------------------------------------------------------

    -- render desktop background
    core.draw(g.img.desktop,
            core.sWidth/2, core.sHeight/2,
            0,
            core.sHeight*core.aspectRatio(g.img.desktop), core.sHeight,
            "center", "center")


    -- render the taskbar
    core.draw(g.img.taskbar,
            0, core.bumpY + 600,
            0,
            core.sWidth,
            36,
            "left", "bottom"
    )
end



function g.loadSkin(skinName) -- loads a skin into memory
    for name, imagePath in pairs(g.imagePointers) do
        g.img[name] = lg.newImage("assets/skins/" .. skinName .. "/" .. imagePath)
    end
end




---------------------------------------------------------------------
-----------------------GAME FUNCTIONS--------------------------------

-- NOTE: for drawing outside the bounds of the game window, use core.draw()

function game.draw( drawable, x, y, r, sx, sy, ox, oy, kx, ky ) -- in place of love.graphics.draw()
    x = x and x or 0 -- set x to 0 if it doesn't exist
    y = y and y or 0 -- set y to 0 if it doesn't exist
    core.draw( drawable, x + core.bumpX, y + core.bumpY, r, sx, sy, ox, oy, kx, ky )
end


function game.render() -- this renders the game items (ex. play field, score, etc)
    game.draw(g.img.playAreaWindow,
            game.fieldOffset.x - 6, game.fieldOffset.y - 18,
            0,
            512, 524
    )

    -- draw the play area BG
    game.draw(g.img.playAreaBg,
            game.fieldOffset.x, game.fieldOffset.y,
            0,
            500, 500
    )

    -- render beats here


    -- draw the play area foreground
    game.draw(g.img.playAreaForeground,
            game.fieldOffset.x, game.fieldOffset.y,
            0,
            500, 500
    )


end

function game.update(dt)

end

---------------------------------------------------------------------
----------------------MENU FUNCTIONS---------------------------------

function menu.render() -- this renders the game items (ex. play field, score, etc)

end

function menu.update(dt)

end